/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * rulePanel.java
 *
 * Created on 14.05.2009, 20:08:30
 */

package peripheral.designer.wizard;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import peripheral.logic.rule.Condition;
import peripheral.logic.rule.Rule;
import peripheral.logic.symboladapter.SymbolAdapter;

/**
 *
 * @author Berni
 */
public class RulePanel extends javax.swing.JPanel {

    private Container parent;

    private Rule rule;
    private List<Condition> conditions;

    private GridBagLayout layout;

    private JPanel buttonPanel;

    /** Creates new form rulePanel */
    public RulePanel(Rule rule, Container parent) {
        initComponents();
        setBorder(javax.swing.BorderFactory.createTitledBorder("Rule"));

        this.parent = parent;

        layout = new GridBagLayout();
        this.setLayout(layout);

        this.rule = rule;
        this.conditions = rule.getConditions();

        buttonPanel = createButtonPanel();

        createLayout();

        if (conditions.size() == 0) {
            
            addNewCondition();
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 483, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 98, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    private JPanel createButtonPanel() {
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(null);

        JButton addRuleButton = new JButton("+");
        addRuleButton.addActionListener(new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                addNewCondition();
            }
        });

        buttonPanel.setSize(90,25);
        addRuleButton.setBounds(5, 5, 80, 20);

        buttonPanel.add(addRuleButton);

        return buttonPanel;
    }

    private void updateContent() {

        this.removeAll();

        this.createLayout();

        this.validate();

        parent.validate();
    }

    private void createLayout() {

        int i=0;

        GridBagConstraints gbc;

        for (Condition condition : conditions) {

            //left side
            JComboBox sensorValue = new JComboBox();
            sensorValue.addItem("Sensor1.X");
            sensorValue.addItem("Sensor1.Y");

            gbc = makegbc(0,i,1,1,GridBagConstraints.BOTH,(int)sensorValue.getWidth(),(int)sensorValue.getHeight());

            layout.setConstraints(sensorValue, gbc);

            this.add(sensorValue);

            //operation
            JComboBox operations = new JComboBox();
            operations.addItem("groe√üer");
            operations.addItem("gleich");

            gbc = makegbc(1,i,1,1,GridBagConstraints.BOTH,(int)operations.getWidth(),(int)operations.getHeight());

            layout.setConstraints(operations, gbc);

            this.add(operations);

            //right side
            Component com; //= condition.getOperation().getRightSideComponent();
            com = new JLabel("place holder");

            gbc = makegbc(2,i,1,1,GridBagConstraints.BOTH,(int)com.getWidth(),(int)com.getHeight());

            layout.setConstraints(com, gbc);

            this.add(com);

            //delete button
            JButton delButton = new JButton("delete");

            delButton.addActionListener(new DelActionListener(condition));

            gbc = makegbc(3,i,1,1,GridBagConstraints.BOTH,(int)delButton.getWidth(),(int)delButton.getHeight());

            layout.setConstraints(delButton, gbc);

            this.add(delButton);

            i++;
        }

        //add button panel at least
        gbc = makegbc(3,i,1,1,GridBagConstraints.NONE,(int)buttonPanel.getWidth(),(int)buttonPanel.getHeight());
        layout.setConstraints(buttonPanel, gbc);
        this.add(buttonPanel);
    }

    private void addNewCondition() {

        conditions.add(new Condition());
        updateContent();
        
    }

    private void removeCondition(Condition con) {

        conditions.remove(con);
        updateContent();
        
    }

    /**
     * @return created rule including it's conditions and actions by this panel
     */
    public Rule getRule() {
        return rule;
    }

    public Dimension getMinimumDisplaySize() {
        return new Dimension(200,10);
    }

    /**
     * creates the settings for a component which should be displayed in GridBagLayout
     * @param x startcoordinate of component
     * @param y startcoordinate of component
     * @param width how many cells
     * @param height how many cells
     * @return
     */
    private GridBagConstraints makegbc (int x, int y, int width, int height,int fill, int ipadx, int ipady) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = x;
        gbc.gridy = y;
        gbc.gridwidth = width;
        gbc.gridheight = height;
        gbc.fill = fill;
        gbc.ipadx = ipadx;
        gbc.ipady = ipady;
        //Defines the border of each element
        gbc.insets = new Insets(5, 5, 5, 5);

        return gbc;
    }

    /**
     * Inner class to remember condition a button belongs to
     */
    class DelActionListener implements ActionListener {

        Condition con;

        public DelActionListener(Condition con) {

            this.con = con;
        }
        public void actionPerformed(ActionEvent e) {
            removeCondition(con);

            updateContent();
        }


    }
}
